//
//  TournamentAPI.swift
//  meoggo_gallae
//
//  Created by Ïù¥Îã§Í≤Ω on 6/15/25.
//

import SwiftUI

struct TournamentApi {
    static let shared = TournamentApi()
    private init() {}
    
    // Î©îÎâ¥ ÏàúÏúÑ (Î¶¨ÎçîÎ≥¥Îìú) Ï°∞Ìöå API
    func fetchLeaderboard(completion: @escaping (Result<[LeaderboardItem], Error>) -> Void) {
        let url = URL(string: MGURL.Tournament.getleaderboard)!
        
        URLSession.shared.dataTask(with: url) { data, response, error in
            DispatchQueue.main.async {
                if let error = error {
                    completion(.failure(error))
                    return
                }
                
                guard let data = data else {
                    completion(.failure(URLError(.badServerResponse)))
                    return
                }
                
                do {
                    let decoded = try JSONDecoder().decode(LeaderboardResponse.self, from: data)
                    completion(.success(decoded.leaderboard))
                } catch {
                    completion(.failure(error))
                }
            }
        }.resume()
    }
    
    // ÌäπÏ†ï ÏùåÏãùÏùò Îû≠ÌÇπ ÌÜµÍ≥Ñ Ï†ïÎ≥¥ Ï°∞Ìöå API (food id Í≥†Ï†ï: 1)
    func fetchMyFoodRanking(foodId: Int, completion: @escaping (Result<FoodRankingStat, Error>) -> Void) {
        let url = URL(string: MGURL.Tournament.getStatisticsByFood(id: foodId))!

        var request = URLRequest(url: url)
        request.httpMethod = "GET"

        URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                completion(.failure(error))
                return
            }

            guard let data = data else {
                completion(.failure(ApiError.emptyResponse))
                return
            }

            do {
                let decoded = try JSONDecoder().decode(FoodRankingStatResponse.self, from: data)
                completion(.success(decoded.stats))
            } catch {
                completion(.failure(error))
            }
        }.resume()
    }

    // Ï†ÑÏ≤¥ ÏùåÏãù Î¶¨Ïä§Ìä∏ Í∞úÏàòÎ•º Í∏∞Î∞òÏúºÎ°ú Í∞ÄÎä•Ìïú ÌÜ†ÎÑàÎ®ºÌä∏ ÎùºÏö¥Îìú(Í∞ï) Í≥ÑÏÇ∞ Ìï®Ïàò (API Ìò∏Ï∂ú ÏïÑÎãò, Î°úÏª¨ Í≥ÑÏÇ∞)
    func calculateAvailableRounds(from count: Int) -> [String] {
        let base = [4, 8, 16, 32, 64, 128, 132]
        return base.filter { $0 <= count }.reversed().map { "\($0)Í∞ï" }
    }
    
    // Î™®Îì† ÏùåÏãù Î™©Î°ù Ï°∞Ìöå
    func fetchFoodCountAndUpdateRounds(completion: @escaping ([String]) -> Void) {
        let url = URL(string: MGURL.Tournament.getAllFoodList)!

        URLSession.shared.dataTask(with: url) { data, response, error in
            if let data = data {
                do {
                    let decoded = try JSONDecoder().decode(FoodListResponse.self, from: data)
                    let rounds = calculateAvailableRounds(from: decoded.foods.count)
                    DispatchQueue.main.async {
                        completion(rounds)
                    }
                } catch {
                    print("JSON decode error: \(error)")
                }
            } else if let error = error {
                print("Request error: \(error)")
            }
        }.resume()
    }

    // ÌÜ†ÎÑàÎ®ºÌä∏ ÎùºÏö¥Îìú Îç∞Ïù¥ÌÑ∞ Ï°∞Ìöå
    func fetchRoundFoods(round: Int, limit: Int = 2, completion: @escaping (Result<RoundFoodResponse, Error>) -> Void) {
        print("[fetchRoundFoods] ‚è≥ ÏöîÏ≤≠ Ï§ÄÎπÑÏ§ë...")

        // URL Íµ¨ÏÑ± (ÏøºÎ¶¨ ÌååÎùºÎØ∏ÌÑ∞ Ìè¨Ìï®)
        var components = URLComponents(string: MGURL.Tournament.getTournamentRoundData)!
        components.queryItems = [
            URLQueryItem(name: "round", value: String(round)),
            URLQueryItem(name: "limit", value: String(limit))
        ]

        guard let url = components.url else {
            print("[fetchRoundFoods] ‚ùå URL ÏÉùÏÑ± Ïã§Ìå®")
            completion(.failure(NSError(domain: "Invalid URL", code: 0)))
            return
        }

        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")

        print("[fetchRoundFoods] üì§ ÏöîÏ≤≠ URL:", url)

        URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                print("[fetchRoundFoods] ‚ùå Request error:", error)
                completion(.failure(error))
                return
            }

            guard let data = data else {
                print("[fetchRoundFoods] ‚ùå No data")
                completion(.failure(NSError(domain: "No data", code: 0)))
                return
            }

            // ÎîîÎ≤ÑÍπÖÏö© ÏùëÎãµ Ï∂úÎ†•
            if let jsonString = String(data: data, encoding: .utf8) {
                print("[fetchRoundFoods] üìÑ ÏùëÎãµ Îç∞Ïù¥ÌÑ∞:\n\(jsonString)")
            }

            do {
                let decoded = try JSONDecoder().decode(RoundFoodResponse.self, from: data)
                print("[fetchRoundFoods] ‚úÖ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú ÌååÏã±Îê®")
                completion(.success(decoded))
            } catch {
                print("[fetchRoundFoods] ‚ùå ÎîîÏΩîÎî© Ïã§Ìå®:", error)
                completion(.failure(error))
            }
        }.resume()
    }

    
    // ÌÜ†ÎÑàÎ®ºÌä∏ Ìà¨Ìëú
    func voteFood(userId: Int, winnerId: Int, loserId: Int, round: Int, completion: ((Error?) -> Void)? = nil) {
            guard let url = URL(string: MGURL.Tournament.postTournamentVote) else {
                completion?(ApiError.invalidURL)
                return
            }
            
            let voteData: [String: Any] = [
                "userId": userId,
                "winnerId": winnerId,
                "loserId": loserId,
                "round": round
            ]
            
            var request = URLRequest(url: url)
            request.httpMethod = "POST"
            request.httpBody = try? JSONSerialization.data(withJSONObject: voteData)
            request.setValue("application/json", forHTTPHeaderField: "Content-Type")
            
            URLSession.shared.dataTask(with: request) { _, _, error in
                DispatchQueue.main.async {
                    completion?(error)
                }
            }.resume()
        }
}

enum ApiError: Error {
    case invalidURL
    case emptyResponse
}
